#!/usr/bin/env node

/**
 * Test script for GitHub Issues integration
 * Tests the GitHubTaskManager functionality and GitHub CLI command generation
 */

// Simple test to verify GitHubTaskManager functionality
async function testGitHubTaskManager() {
    console.log('🧪 Testing GitHub Task Manager Integration\n');
    
    // Mock the GitHubTaskManager class functionality
    const mockConfig = {
        task_management: {
            repository: 'adrianwedd/adrianwedd',
            default_assignee: 'adrianwedd',
            labels: {
                priority: {
                    high: 'priority: high',
                    medium: 'priority: medium',
                    low: 'priority: low'
                },
                type: {
                    task: 'type: task',
                    enhancement: 'type: enhancement',
                    bug: 'type: bug',
                    documentation: 'type: documentation'
                },
                agent: {
                    claude: 'agent: claude'
                }
            }
        },
        integrations: {
            ai_assistant: {
                auto_categorize: true,
                suggest_labels: true,
                estimate_priority: true
            }
        }
    };

    // Test AI categorization
    console.log('🤖 Testing AI Categorization:');
    
    const testTasks = [
        'Fix terminal theme bug causing display issues',
        'Add new voice recognition feature for better UX',
        'Update documentation for task management system',
        'Urgent: Critical security vulnerability in authentication'
    ];

    testTasks.forEach(task => {
        const priority = categorizePriority(task);
        const type = categorizeType(task);
        const labels = getLabelsForTask(priority, type, mockConfig);
        
        console.log(`📝 "${task}"`);
        console.log(`   Priority: ${priority}`);
        console.log(`   Type: ${type}`);
        console.log(`   Labels: ${labels.join(', ')}`);
        console.log();
    });

    // Test command generation
    console.log('⚙️  Testing GitHub CLI Command Generation:');
    
    const sampleTask = {
        title: 'Implement advanced command history with search and filtering',
        description: 'Enhance command history with advanced search, filtering, timestamps, and contextual suggestions based on usage patterns.',
        priority: 'high',
        type: 'enhancement'
    };

    const command = generateGitHubCommand(sampleTask, mockConfig);
    console.log('Generated command:');
    console.log(command);
    console.log();

    // Test bulk migration planning
    console.log('📋 Testing Bulk Migration Planning:');
    console.log('Tasks from tasks.yml that would be migrated:');
    console.log('- 15 test coverage tasks (test-001 to test-015)');
    console.log('- 20 enhancement tasks (enhance-001 to enhance-020)');
    console.log('- Total: 35 tasks ready for GitHub Issues');
    console.log();

    console.log('✅ GitHub Task Manager Integration Test Complete!');
}

// Helper functions (simplified versions of the actual GitHubTaskManager methods)
function categorizePriority(taskDescription) {
    const urgent = /urgent|critical|asap|immediately|emergency|blocking/i;
    const low = /nice to have|when possible|low priority|future|someday/i;
    
    if (urgent.test(taskDescription)) return 'high';
    if (low.test(taskDescription)) return 'low';
    return 'medium';
}

function categorizeType(taskDescription) {
    const bug = /bug|error|broken|fail|issue|problem|fix/i;
    const enhancement = /enhance|improve|feature|add|new|upgrade|better/i;
    const docs = /document|readme|help|guide|wiki|doc/i;
    
    if (bug.test(taskDescription)) return 'bug';
    if (enhancement.test(taskDescription)) return 'enhancement';
    if (docs.test(taskDescription)) return 'documentation';
    return 'task';
}

function getLabelsForTask(priority, type, config) {
    const labels = [];
    
    if (config.task_management.labels.priority[priority]) {
        labels.push(config.task_management.labels.priority[priority]);
    }
    
    if (config.task_management.labels.type[type]) {
        labels.push(config.task_management.labels.type[type]);
    }
    
    if (config.task_management.labels.agent.claude) {
        labels.push(config.task_management.labels.agent.claude);
    }
    
    return labels;
}

function generateGitHubCommand(task, config) {
    const labels = getLabelsForTask(task.priority, task.type, config);
    const labelsArg = labels.map(l => `"${l}"`).join(',');
    const assignee = config.task_management.default_assignee;
    
    const body = `## Task Description
${task.description}

## Priority
${task.priority}

## Type
${task.type}

Generated by Claude Code task management`;

    return `gh issue create --repo "${config.task_management.repository}" --title "${task.title}" --body "${body}" --label ${labelsArg} --assignee "${assignee}"`;
}

// Run the test
testGitHubTaskManager().catch(console.error);