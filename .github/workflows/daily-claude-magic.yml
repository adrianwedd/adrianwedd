name: 🤖 Daily AI Magic
on:
  schedule:
    - cron: '0 12 * * *' # Run daily at 12:00 UTC (9pm Tasmania time)
  workflow_dispatch: # Allow manual trigger

jobs:
  ai-daily-magic:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🎯 Generate Daily Prompt
      id: prompt
      run: |
        # Generate a unique, creative daily prompt using system entropy
        DATE=$(date +%Y%m%d)
        SEED=$(echo $DATE | sha256sum | cut -c1-8)
        
        # Array of creative prompts (each designed for <50 tokens)
        PROMPTS=(
          "Generate a haiku about systems thinking and Tasmania's wilderness. Be profound."
          "Write a 2-line code comment that's unexpectedly philosophical about distributed systems."
          "Create a unix command that doesn't exist but should. Include a witty description."
          "Describe recursion using only words that start with 'r'. Be clever."
          "Write a commit message for merging reality with simulation. Keep it git-style."
          "Generate ASCII art of a fractal tree using only | / \\ - symbols. 5 lines max."
        )
        
        # Select prompt based on date seed
        INDEX=$((0x$SEED % ${#PROMPTS[@]}))
        SELECTED_PROMPT="${PROMPTS[$INDEX]}"
        
        echo "prompt=$SELECTED_PROMPT" >> $GITHUB_OUTPUT
        echo "date=$DATE" >> $GITHUB_OUTPUT
        echo "seed=$SEED" >> $GITHUB_OUTPUT
        
    - name: 🧠 AI API Call
      id: ai
      run: |
        # Ultra-minimal AI API call (optimized for <50 tokens)
        RESPONSE=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
          -H "Content-Type: application/json" \
          -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
          -H "anthropic-version: 2023-06-01" \
          --data '{
            "model": "claude-3-haiku-20240307",
            "max_tokens": 50,
            "temperature": 0.9,
            "messages": [
              {
                "role": "user", 
                "content": "${{ steps.prompt.outputs.prompt }}"
              }
            ]
          }')
        
        # Extract response text and handle JSON safely
        AI_OUTPUT=$(echo "$RESPONSE" | jq -r '.content[0].text // "Error: API call failed"')
        TOKEN_COUNT=$(echo "$RESPONSE" | jq -r '.usage.output_tokens // "unknown"')
        
        echo "output=$AI_OUTPUT" >> $GITHUB_OUTPUT
        echo "tokens=$TOKEN_COUNT" >> $GITHUB_OUTPUT
        
        # Debug output
        echo "🤖 AI Response: $AI_OUTPUT"
        echo "🎯 Tokens used: $TOKEN_COUNT"

    - name: 📝 Create Daily Magic File
      run: |
        mkdir -p magic/daily
        DATE="${{ steps.prompt.outputs.date }}"
        
        cat > "magic/daily/$DATE.md" << EOF
        # 🌅 Daily AI Magic - $DATE
        
        **Prompt Seed:** \`${{ steps.prompt.outputs.seed }}\`  
        **Tokens Used:** ${{ steps.ai.outputs.tokens }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 🎯 Today's Challenge
        > ${{ steps.prompt.outputs.prompt }}
        
        ## 🤖 AI Response
        \`\`\`
        ${{ steps.ai.outputs.output }}
        \`\`\`
        
        ## 📊 Efficiency Metrics
        - **Model:** claude-3-haiku-20240307
        - **Token Limit:** 50 tokens
        - **Actual Usage:** ${{ steps.ai.outputs.tokens }} tokens
        - **Creativity Index:** $(echo "scale=2; ${{ steps.ai.outputs.tokens }}/50*100" | bc -l)%
        
        ---
        *Generated by the Daily AI Magic CI workflow*
        EOF

    - name: 🎨 Update Terminal Display
      run: |
        # Update the latest magic for terminal display
        cat > "assets/daily-magic.json" << EOF
        {
          "date": "${{ steps.prompt.outputs.date }}",
          "prompt": "${{ steps.prompt.outputs.prompt }}",
          "response": "${{ steps.ai.outputs.output }}",
          "tokens": ${{ steps.ai.outputs.tokens }},
          "seed": "${{ steps.prompt.outputs.seed }}",
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        }
        EOF

    - name: 📈 Update Magic Stats
      run: |
        # Update running statistics
        if [ ! -f "magic/stats.json" ]; then
          echo '{"total_days": 0, "total_tokens": 0, "average_tokens": 0, "max_tokens": 0, "min_tokens": 50}' > magic/stats.json
        fi
        
        # Parse current stats
        TOTAL_DAYS=$(jq -r '.total_days' magic/stats.json)
        TOTAL_TOKENS=$(jq -r '.total_tokens' magic/stats.json)
        MAX_TOKENS=$(jq -r '.max_tokens' magic/stats.json)
        MIN_TOKENS=$(jq -r '.min_tokens' magic/stats.json)
        
        # Calculate new stats
        NEW_TOKENS=${{ steps.ai.outputs.tokens }}
        NEW_TOTAL_DAYS=$((TOTAL_DAYS + 1))
        NEW_TOTAL_TOKENS=$((TOTAL_TOKENS + NEW_TOKENS))
        NEW_AVERAGE_TOKENS=$(echo "scale=1; $NEW_TOTAL_TOKENS/$NEW_TOTAL_DAYS" | bc -l)
        NEW_MAX_TOKENS=$([ $NEW_TOKENS -gt $MAX_TOKENS ] && echo $NEW_TOKENS || echo $MAX_TOKENS)
        NEW_MIN_TOKENS=$([ $NEW_TOKENS -lt $MIN_TOKENS ] && echo $NEW_TOKENS || echo $MIN_TOKENS)
        
        # Update stats file
        jq --arg days "$NEW_TOTAL_DAYS" \
           --arg tokens "$NEW_TOTAL_TOKENS" \
           --arg avg "$NEW_AVERAGE_TOKENS" \
           --arg max "$NEW_MAX_TOKENS" \
           --arg min "$NEW_MIN_TOKENS" \
           '.total_days = ($days | tonumber) | 
            .total_tokens = ($tokens | tonumber) | 
            .average_tokens = ($avg | tonumber) | 
            .max_tokens = ($max | tonumber) | 
            .min_tokens = ($min | tonumber)' \
           magic/stats.json > magic/stats.tmp && mv magic/stats.tmp magic/stats.json

    - name: 🎭 Generate ASCII Art Summary
      run: |
        # Create a tiny ASCII visualization of today's magic
        TOKENS=${{ steps.ai.outputs.tokens }}
        BARS=$(echo "scale=0; $TOKENS/5" | bc -l) # Scale to ~10 bars max
        
        echo "📊 Today's Token Usage:" > magic/daily-viz.txt
        printf "["
        for i in $(seq 1 $BARS); do printf "█"; done
        for i in $(seq $((BARS+1)) 10); do printf "░"; done
        printf "] %d/50 tokens\n" $TOKENS >> magic/daily-viz.txt

    - name: 🚀 Commit Daily Magic
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Claude Magic Bot"
        
        git add magic/ assets/daily-magic.json
        
        # Create an artistic commit message
        git commit -m "✨ Daily AI Magic $(date +%Y%m%d)

        🎯 Prompt: ${{ steps.prompt.outputs.prompt }}
        🤖 Response: ${{ steps.ai.outputs.output }}
        🔢 Tokens: ${{ steps.ai.outputs.tokens }}/50
        
        Generated with $(bc -l <<< "scale=1; ${{ steps.ai.outputs.tokens }}/50*100")% efficiency"

    - name: 📤 Push Changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: 🎉 Create Success Issue
      if: steps.ai.outputs.tokens > 45
      run: |
        # Create an issue if we used >90% of tokens (exceptional creativity!)
        gh issue create \
          --title "🎯 Exceptional Daily Magic - ${{ steps.prompt.outputs.date }}" \
          --body "AI achieved exceptional creativity today!

        **Prompt:** ${{ steps.prompt.outputs.prompt }}
        **Response:** ${{ steps.ai.outputs.output }}
        **Tokens Used:** ${{ steps.ai.outputs.tokens }}/50 ($(bc -l <<< "scale=1; ${{ steps.ai.outputs.tokens }}/50*100")%)

        This represents maximum creative efficiency within our token constraints!" \
          --label "type: enhancement,agent: ai,priority: low"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Output Summary
      run: |
        echo "🎉 Daily AI Magic Complete!"
        echo "📅 Date: ${{ steps.prompt.outputs.date }}"
        echo "🎯 Prompt: ${{ steps.prompt.outputs.prompt }}"
        echo "🤖 Response: ${{ steps.ai.outputs.output }}"
        echo "🔢 Tokens Used: ${{ steps.ai.outputs.tokens }}/50"
        echo "⚡ Efficiency: $(bc -l <<< "scale=1; ${{ steps.ai.outputs.tokens }}/50*100")%"