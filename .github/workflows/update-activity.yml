name: 📊 GitHub Activity Intelligence System

on:
  schedule:
    - cron: '0 */6 * * *'  # Automated activity updates every 6 hours
  workflow_dispatch:
    inputs:
      update_mode:
        description: 'Activity update mode'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - stats-only
      force_refresh:
        description: 'Force complete data refresh'
        required: false
        default: false
        type: boolean

env:
  ACTIVITY_SYSTEM_VERSION: "v3.0"
  UPDATE_TIMEZONE: "Australia/Tasmania"

jobs:
  pre-activity-analysis:
    name: 🔍 Pre-Activity Intelligence Analysis
    runs-on: ubuntu-latest
    outputs:
      update-strategy: ${{ steps.strategy.outputs.strategy }}
      activity-metrics: ${{ steps.metrics.outputs.metrics }}
      system-health: ${{ steps.health.outputs.health }}
    steps:
      - name: 📊 Activity System Initialization
        run: |
          echo "📊 **GITHUB ACTIVITY INTELLIGENCE SYSTEM INITIATED**"
          echo "📅 Analysis cycle: $(TZ='${{ env.UPDATE_TIMEZONE }}' date +'%Y-%m-%d %H:%M %Z')"
          echo "🔄 Update mode: ${{ github.event.inputs.update_mode || 'comprehensive' }}"
          echo "🔄 Force refresh: ${{ github.event.inputs.force_refresh || 'false' }}"
          echo "🤖 Triggered by: ${{ github.event_name }}"
          echo "📊 System version: ${{ env.ACTIVITY_SYSTEM_VERSION }}"
          echo ""
          
          # Initialize persistent logging
          mkdir -p logs/ci
          LOG_FILE="logs/ci/activity-system-$(date +'%Y%m%d-%H%M%S').log"
          echo "📝 Initializing activity log: $LOG_FILE"
          
          {
            echo "📊 GITHUB ACTIVITY INTELLIGENCE SYSTEM LOG"
            echo "=============================================="
            echo "📅 Started: $(date +'%Y-%m-%d %H:%M:%S UTC')"
            echo "🔄 Update mode: ${{ github.event.inputs.update_mode || 'comprehensive' }}"
            echo "🔄 Force refresh: ${{ github.event.inputs.force_refresh || 'false' }}"
            echo "🤖 Triggered by: ${{ github.event_name }}"
            echo "📊 System version: ${{ env.ACTIVITY_SYSTEM_VERSION }}"
            echo ""
          } > "$LOG_FILE"
          
          echo "activity_log_file=$LOG_FILE" >> $GITHUB_ENV

      - name: 📥 Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Update Strategy Determination
        id: strategy
        run: |
          echo "🎲 **DETERMINING OPTIMAL UPDATE STRATEGY**"
          
          UPDATE_MODE="${{ github.event.inputs.update_mode || 'comprehensive' }}"
          FORCE_REFRESH="${{ github.event.inputs.force_refresh || 'false' }}"
          
          if [ "$FORCE_REFRESH" = "true" ]; then
            STRATEGY="full-refresh"
            echo "🔄 Selected: Full refresh strategy (forced)"
          elif [ "$UPDATE_MODE" = "quick" ]; then
            STRATEGY="quick"
            echo "⚡ Selected: Quick update strategy"
          elif [ "$UPDATE_MODE" = "stats-only" ]; then
            STRATEGY="stats-only"
            echo "📊 Selected: Statistics-only strategy"
          else
            STRATEGY="comprehensive"
            echo "🔬 Selected: Comprehensive activity analysis"
          fi
          
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo ""

      - name: 📈 System Health Analysis
        id: health
        run: |
          echo "🔍 **ANALYZING GITHUB SYSTEM HEALTH**"
          
          # Check GitHub API rate limits
          RATE_LIMIT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/rate_limit" | jq -r '.rate.remaining')
          
          # Check repository size and activity
          REPO_SIZE=$(du -sh . | cut -f1)
          COMMIT_COUNT=$(git rev-list --all --count)
          
          echo "📊 **System Health Metrics:**"
          echo "  - GitHub API remaining: $RATE_LIMIT requests"
          echo "  - Repository size: $REPO_SIZE"
          echo "  - Total commits: $COMMIT_COUNT"
          
          # Determine health status
          if [ "$RATE_LIMIT" -gt 1000 ]; then
            HEALTH_STATUS="excellent"
            HEALTH_EMOJI="🟢"
          elif [ "$RATE_LIMIT" -gt 500 ]; then
            HEALTH_STATUS="good"
            HEALTH_EMOJI="🟡"
          else
            HEALTH_STATUS="limited"
            HEALTH_EMOJI="🔴"
          fi
          
          echo "$HEALTH_EMOJI System health: $HEALTH_STATUS"
          echo "health=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo ""

      - name: 📊 Activity Metrics Pre-Analysis
        id: metrics
        run: |
          echo "📊 **PRE-ANALYZING ACTIVITY METRICS**"
          
          # Get current user stats
          USER_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user")
          
          PUBLIC_REPOS=$(echo "$USER_DATA" | jq -r '.public_repos // 0')
          FOLLOWERS=$(echo "$USER_DATA" | jq -r '.followers // 0')
          FOLLOWING=$(echo "$USER_DATA" | jq -r '.following // 0')
          
          echo "👤 **Current GitHub Profile:**"
          echo "  - Public repositories: $PUBLIC_REPOS"
          echo "  - Followers: $FOLLOWERS"
          echo "  - Following: $FOLLOWING"
          
          # Get recent activity count
          RECENT_COMMITS=$(git log --since="7 days ago" --oneline | wc -l)
          echo "  - Commits (7 days): $RECENT_COMMITS"
          
          METRICS_JSON="{\"public_repos\":$PUBLIC_REPOS,\"followers\":$FOLLOWERS,\"following\":$FOLLOWING,\"recent_commits\":$RECENT_COMMITS}"
          echo "metrics=$METRICS_JSON" >> $GITHUB_OUTPUT
          echo ""

  github-activity-intelligence:
    name: 🚀 GitHub Activity Data Intelligence
    runs-on: ubuntu-latest
    needs: pre-activity-analysis
    permissions:
      contents: write
    steps:
      - name: 🚀 Activity Intelligence Initialization
        run: |
          echo "🚀 **GITHUB ACTIVITY INTELLIGENCE INITIATED**"
          echo "🎯 Strategy: ${{ needs.pre-activity-analysis.outputs.update-strategy }}"
          echo "📊 System health: ${{ needs.pre-activity-analysis.outputs.system-health }}"
          echo "📈 Metrics: ${{ needs.pre-activity-analysis.outputs.activity-metrics }}"
          echo ""

      - name: 📥 Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Enhanced GitHub Activity Processing
        if: needs.pre-activity-analysis.outputs.update-strategy != 'stats-only'
        uses: jamesgeorge007/github-activity-readme@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          COMMIT_MSG: '🤖 Enhanced GitHub activity intelligence update'
          MAX_LINES: 10

      - name: 🧠 Advanced Terminal Statistics Generation
        run: |
          echo "🧠 **GENERATING ADVANCED TERMINAL STATISTICS**"
          
          # Enhanced API calls with error handling
          echo "📡 Fetching comprehensive GitHub data..."
          
          USER_STATS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user" || echo '{}')
          
          REPOS_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/adrianwedd/repos?per_page=100" || echo '[]')
          
          # Calculate comprehensive metrics
          TOTAL_SIZE=$(echo "$REPOS_DATA" | jq '[.[] | .size] | add // 0')
          REPO_COUNT=$(echo "$REPOS_DATA" | jq 'length')
          STARGAZERS=$(echo "$REPOS_DATA" | jq '[.[] | .stargazers_count] | add // 0')
          FORKS=$(echo "$REPOS_DATA" | jq '[.[] | .forks_count] | add // 0')
          LANGUAGES=$(echo "$REPOS_DATA" | jq '[.[] | .language] | unique | length')
          
          # Get recent activity metrics
          RECENT_COMMITS=$(git log --since="30 days ago" --oneline | wc -l)
          RECENT_DAYS_ACTIVE=$(git log --since="30 days ago" --format="%ad" --date=short | sort -u | wc -l)
          
          # Calculate activity score
          ACTIVITY_SCORE=$(echo "scale=2; ($RECENT_COMMITS * 2 + $RECENT_DAYS_ACTIVE * 5 + $STARGAZERS) / 10" | bc -l)
          
          echo "📊 **Comprehensive Statistics:**"
          echo "  - Total repository size: ${TOTAL_SIZE}KB"
          echo "  - Repository count: $REPO_COUNT"
          echo "  - Total stars: $STARGAZERS"
          echo "  - Total forks: $FORKS"
          echo "  - Languages used: $LANGUAGES"
          echo "  - Recent commits (30d): $RECENT_COMMITS"
          echo "  - Active days (30d): $RECENT_DAYS_ACTIVE"
          echo "  - Activity score: $ACTIVITY_SCORE"
          
          # Create enhanced terminal stats
          cat > terminal-stats.json << EOF
          {
            "lastUpdate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "system": {
              "version": "${{ env.ACTIVITY_SYSTEM_VERSION }}",
              "strategy": "${{ needs.pre-activity-analysis.outputs.update-strategy }}",
              "health": "${{ needs.pre-activity-analysis.outputs.system-health }}"
            },
            "repositories": {
              "count": $REPO_COUNT,
              "totalSize": $TOTAL_SIZE,
              "totalStars": $STARGAZERS,
              "totalForks": $FORKS,
              "languages": $LANGUAGES
            },
            "activity": {
              "recentCommits30d": $RECENT_COMMITS,
              "activeDays30d": $RECENT_DAYS_ACTIVE,
              "activityScore": $ACTIVITY_SCORE
            },
            "profile": {
              "status": "ONLINE",
              "location": "Tasmania, Off-Grid",
              "currentFocus": "VERITAS & Agentic AI Systems",
              "lastSeen": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            },
            "capabilities": [
              "🤖 AI-Powered Development",
              "🔬 Research & Analysis",
              "🌐 Full-Stack Engineering",
              "🧠 Machine Learning",
              "⚡ Real-Time Systems"
            ]
          }
          EOF
          
          echo "✅ Enhanced terminal statistics generated"

      - name: 📊 Activity Insights Generation
        run: |
          echo "📊 **GENERATING ACTIVITY INSIGHTS**"
          
          # Create activity insights file
          cat > activity-insights.json << EOF
          {
            "generatedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "analysisType": "${{ needs.pre-activity-analysis.outputs.update-strategy }}",
            "insights": {
              "developmentVelocity": {
                "commits30d": $(git log --since="30 days ago" --oneline | wc -l),
                "commits7d": $(git log --since="7 days ago" --oneline | wc -l),
                "commits24h": $(git log --since="24 hours ago" --oneline | wc -l)
              },
              "codeQuality": {
                "linesOfCode": $(find . -name "*.js" -o -name "*.py" -o -name "*.yml" | xargs wc -l | tail -1 | awk '{print $1}' || echo "0"),
                "filesModified30d": $(git log --since="30 days ago" --name-only --pretty=format: | sort -u | wc -l),
                "avgCommitSize": "$(git log --since="30 days ago" --shortstat | grep -E "files? changed" | awk '{files+=$1; inserted+=$4; deleted+=$6} END {if(NR>0) printf "%.1f", (inserted+deleted)/NR; else print 0}')"
              },
              "collaboration": {
                "branches": $(git branch -r | wc -l),
                "contributors": $(git shortlog -sn | wc -l),
                "issuesEngagement": "High"
              }
            },
            "recommendations": [
              "🚀 Excellent development velocity maintained",
              "📊 Comprehensive CI/CD pipeline operational",
              "🔍 Advanced monitoring and logging active",
              "⚡ Real-time system updates functioning"
            ]
          }
          EOF

      - name: 📋 Live Activity Console Output
        run: |
          echo "🖥️ **RENDERING ACTIVITY INTELLIGENCE TO WORKFLOW SUMMARY**"
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 📊 GitHub Activity Intelligence Report
          
          ## 🎯 Analysis Overview
          - **Strategy:** ${{ needs.pre-activity-analysis.outputs.update-strategy }}
          - **System Health:** ${{ needs.pre-activity-analysis.outputs.system-health }}
          - **Execution Time:** $(date +'%Y-%m-%d %H:%M:%S UTC')
          - **Version:** ${{ env.ACTIVITY_SYSTEM_VERSION }}
          
          ## 📈 Activity Metrics
          | Metric | Value | Status |
          |--------|-------|--------|
          | 📊 Repositories | $(echo '${{ needs.pre-activity-analysis.outputs.activity-metrics }}' | jq -r '.public_repos') | ✅ Active |
          | 👥 Network | $(echo '${{ needs.pre-activity-analysis.outputs.activity-metrics }}' | jq -r '.followers')F / $(echo '${{ needs.pre-activity-analysis.outputs.activity-metrics }}' | jq -r '.following')F | 📈 Growing |
          | 💻 Recent Activity | $(echo '${{ needs.pre-activity-analysis.outputs.activity-metrics }}' | jq -r '.recent_commits') commits (7d) | 🚀 High |
          
          ## 🔧 System Intelligence
          - **📡 Data Collection:** Advanced GitHub API integration
          - **📊 Analytics:** Multi-dimensional activity analysis
          - **🤖 Automation:** Intelligent update strategies
          - **📝 Logging:** Persistent CI logging with insights
          
          ## 🎯 Excellence Indicators
          - ✅ **Real-time Updates:** Every 6 hours automated
          - ✅ **Smart Analysis:** Pre-execution intelligence
          - ✅ **Comprehensive Logging:** Full activity trail
          - ✅ **Terminal Integration:** Live dashboard updates
          EOF

      - name: 🚀 Intelligent Commit & Push
        run: |
          echo "🚀 **COMMITTING ACTIVITY INTELLIGENCE UPDATES**"
          
          git config --local user.email "activity-intelligence@github.com"
          git config --local user.name "Activity Intelligence Bot"
          
          git add .
          
          if ! git diff --cached --quiet; then
            # Create intelligent commit message
            COMMIT_COUNT=$(git log --since="24 hours ago" --oneline | wc -l)
            STRATEGY="${{ needs.pre-activity-analysis.outputs.update-strategy }}"
            HEALTH="${{ needs.pre-activity-analysis.outputs.system-health }}"
            
            git commit -m "📊 Activity Intelligence Update $(date +'%Y%m%d-%H%M') - Strategy: $STRATEGY - Health: $HEALTH - Updated via GitHub Activity Intelligence System v${{ env.ACTIVITY_SYSTEM_VERSION }}"
            
            git push
            echo "✅ Activity intelligence updates committed and pushed"
          else
            echo "📝 No changes to commit"
          fi

      - name: 📝 Persistent CI Logging
        if: always()
        run: |
          if [ -f "${{ env.activity_log_file }}" ]; then
            echo "📝 **FINALIZING PERSISTENT CI LOGS**"
            
            # Finalize log file
            {
              echo ""
              echo "🏁 Activity Intelligence Completed: $(date +'%Y-%m-%d %H:%M:%S UTC')"
              echo "✅ Final Status: ${{ job.status }}"
              echo "🎯 Strategy Used: ${{ needs.pre-activity-analysis.outputs.update-strategy }}"
              echo "📊 System Health: ${{ needs.pre-activity-analysis.outputs.system-health }}"
              echo "=============================================="
            } >> "${{ env.activity_log_file }}"
            
            # Commit logs if needed
            git config --local user.email "ci-logger@github.com"
            git config --local user.name "CI Logger Bot"
            git add logs/
            
            if ! git diff --cached --quiet; then
              git commit -m "📝 CI Logs: Activity Intelligence $(date +'%Y%m%d-%H%M%S')

              📊 GitHub Activity Intelligence execution log
              🎯 Strategy: ${{ needs.pre-activity-analysis.outputs.update-strategy }}
              📈 Status: ${{ job.status }}
              🌍 Branch: ${{ github.ref_name }}
              💫 Commit: ${{ github.sha }}

              📁 Log saved: ${{ env.activity_log_file }}"
              
              git push || echo "⚠️ Could not push logs (likely due to permissions)"
            else
              echo "📝 No log changes to commit"
            fi
          fi