name: üå§Ô∏è Tasmania Weather Intelligence System

on:
  schedule:
    - cron: '0 */3 * * *' # Automated weather updates every 3 hours
  workflow_dispatch:
    inputs:
      location:
        description: 'Weather monitoring location'
        required: false
        default: 'grove'
        type: choice
        options:
          - grove
          - cygnet
      force_update:
        description: 'Force weather data refresh'
        required: false
        default: false
        type: boolean

env:
  WEATHER_UPDATE_VERSION: "v2.0"
  TASMANIA_TIMEZONE: "Australia/Tasmania"

jobs:
  weather-intelligence:
    name: üå¶Ô∏è Weather Data Intelligence
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: üå§Ô∏è Weather System Initialization
        run: |
          echo "üå§Ô∏è **TASMANIA WEATHER INTELLIGENCE SYSTEM ACTIVATED**"
          echo "üìÖ Update cycle: $(TZ='${{ env.TASMANIA_TIMEZONE }}' date +'%Y-%m-%d %H:%M %Z')"
          echo "üåç Target location: ${{ github.event.inputs.location || 'grove' }}"
          echo "üîÑ Force update: ${{ github.event.inputs.force_update || 'false' }}"
          echo "ü§ñ Triggered by: ${{ github.event_name }}"
          echo "üìä System version: ${{ env.WEATHER_UPDATE_VERSION }}"
          echo ""

      - name: üì• Repository Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üåç Location Intelligence Analysis
        id: location
        run: |
          echo "üåç **ANALYZING TARGET LOCATION PARAMETERS**"
          LOCATION="${{ github.event.inputs.location || 'grove' }}"
          echo "üìç Selected location: $LOCATION"
          
          if [ "$LOCATION" = "grove" ]; then
            # Grove/Cygnet area - closest BOM station
            BOM_URL="http://reg.bom.gov.au/fwo/IDT60801/IDT60801.95977.json"
            STATION_NAME="Grove (Cygnet Area)"
            COORDINATES="-43.1647,147.0584"
          else
            # Default to same station for now - could add more locations
            BOM_URL="http://reg.bom.gov.au/fwo/IDT60801/IDT60801.95977.json"
            STATION_NAME="Grove (Cygnet Area)"
            COORDINATES="-43.1647,147.0584"
          fi
          
          echo "bom_url=$BOM_URL" >> $GITHUB_OUTPUT
          echo "station_name=$STATION_NAME" >> $GITHUB_OUTPUT
          echo "coordinates=$COORDINATES" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT

    - name: üå¶Ô∏è Fetch BOM Weather Data
      id: weather
      run: |
        echo "üå§Ô∏è Fetching weather data from BOM..."
        
        # Fetch the JSON data with user agent (BOM requires this)
        WEATHER_JSON=$(curl -s -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36" \
          "${{ steps.location.outputs.bom_url }}")
        
        if [ -z "$WEATHER_JSON" ] || [ "$WEATHER_JSON" = "null" ]; then
          echo "‚ùå Failed to fetch weather data"
          exit 1
        fi
        
        # Parse the complex BOM JSON structure
        # BOM data has observations -> data array with latest first
        LATEST_OBS=$(echo "$WEATHER_JSON" | jq -r '.observations.data[0]')
        
        if [ "$LATEST_OBS" = "null" ]; then
          echo "‚ùå No weather observations found"
          exit 1
        fi
        
        # Extract key weather data
        TEMP=$(echo "$LATEST_OBS" | jq -r '.air_temp // "N/A"')
        APPARENT_TEMP=$(echo "$LATEST_OBS" | jq -r '.apparent_t // "N/A"')
        HUMIDITY=$(echo "$LATEST_OBS" | jq -r '.rel_hum // "N/A"')
        WIND_DIR=$(echo "$LATEST_OBS" | jq -r '.wind_dir // "N/A"')
        WIND_SPEED_KMH=$(echo "$LATEST_OBS" | jq -r '.wind_spd_kmh // "0"')
        WIND_GUST_KMH=$(echo "$LATEST_OBS" | jq -r '.gust_kmh // "0"')
        PRESSURE=$(echo "$LATEST_OBS" | jq -r '.press_msl // "N/A"')
        RAINFALL=$(echo "$LATEST_OBS" | jq -r '.rain_trace // "0"')
        WEATHER_DESC=$(echo "$LATEST_OBS" | jq -r '.weather // "Fine"')
        OBSERVATION_TIME=$(echo "$LATEST_OBS" | jq -r '.aifstime_utc')
        
        # Convert observation time to readable format
        if [ "$OBSERVATION_TIME" != "null" ] && [ "$OBSERVATION_TIME" != "N/A" ]; then
          FORMATTED_TIME=$(date -d "$OBSERVATION_TIME" "+%Y-%m-%d %H:%M UTC" 2>/dev/null || echo "$OBSERVATION_TIME")
        else
          FORMATTED_TIME="Unknown"
        fi
        
        # Generate weather emoji based on conditions
        WEATHER_EMOJI="‚òÄÔ∏è"
        case "$WEATHER_DESC" in
          *"Rain"*|*"Shower"*) WEATHER_EMOJI="üåßÔ∏è" ;;
          *"Cloud"*|*"Overcast"*) WEATHER_EMOJI="‚òÅÔ∏è" ;;
          *"Clear"*|*"Fine"*) WEATHER_EMOJI="‚òÄÔ∏è" ;;
          *"Storm"*|*"Thunder"*) WEATHER_EMOJI="‚õàÔ∏è" ;;
          *"Fog"*|*"Mist"*) WEATHER_EMOJI="üå´Ô∏è" ;;
          *"Wind"*) WEATHER_EMOJI="üí®" ;;
        esac
        
        # Determine comfort level
        COMFORT="Perfect"
        if [ "$TEMP" != "N/A" ] && [ "$TEMP" != "null" ]; then
          if (( $(echo "$TEMP < 10" | bc -l) )); then
            COMFORT="Cold ‚ùÑÔ∏è"
          elif (( $(echo "$TEMP > 25" | bc -l) )); then
            COMFORT="Warm üî•"
          elif (( $(echo "$TEMP > 30" | bc -l) )); then
            COMFORT="Hot ‚òÄÔ∏è"
          else
            COMFORT="Perfect üòå"
          fi
        fi
        
        # Create outputs for next step
        echo "temp=$TEMP" >> $GITHUB_OUTPUT
        echo "apparent_temp=$APPARENT_TEMP" >> $GITHUB_OUTPUT
        echo "humidity=$HUMIDITY" >> $GITHUB_OUTPUT
        echo "wind_dir=$WIND_DIR" >> $GITHUB_OUTPUT
        echo "wind_speed=$WIND_SPEED_KMH" >> $GITHUB_OUTPUT
        echo "wind_gust=$WIND_GUST_KMH" >> $GITHUB_OUTPUT
        echo "pressure=$PRESSURE" >> $GITHUB_OUTPUT
        echo "rainfall=$RAINFALL" >> $GITHUB_OUTPUT
        echo "weather_desc=$WEATHER_DESC" >> $GITHUB_OUTPUT
        echo "observation_time=$FORMATTED_TIME" >> $GITHUB_OUTPUT
        echo "weather_emoji=$WEATHER_EMOJI" >> $GITHUB_OUTPUT
        echo "comfort=$COMFORT" >> $GITHUB_OUTPUT
        
        # Debug output
        echo "üå°Ô∏è Temperature: $TEMP¬∞C (feels like $APPARENT_TEMP¬∞C)"
        echo "üíß Humidity: $HUMIDITY%"
        echo "üí® Wind: $WIND_DIR $WIND_SPEED_KMH km/h (gusts $WIND_GUST_KMH km/h)"
        echo "üå§Ô∏è Conditions: $WEATHER_DESC $WEATHER_EMOJI"

    - name: üé® Generate Weather Visualization
      id: visualization
      run: |
        # Create ASCII art weather visualization
        TEMP="${{ steps.weather.outputs.temp }}"
        HUMIDITY="${{ steps.weather.outputs.humidity }}"
        WIND_SPEED="${{ steps.weather.outputs.wind_speed }}"
        
        # Temperature bar (0-40¬∞C scale)
        if [ "$TEMP" != "N/A" ] && [ "$TEMP" != "null" ]; then
          TEMP_PERCENT=$(echo "scale=0; ($TEMP * 100) / 40" | bc -l 2>/dev/null || echo "50")
          TEMP_BARS=$(echo "scale=0; $TEMP_PERCENT / 10" | bc -l 2>/dev/null || echo "5")
        else
          TEMP_BARS=5
        fi
        
        # Humidity bar (0-100% scale)
        if [ "$HUMIDITY" != "N/A" ] && [ "$HUMIDITY" != "null" ]; then
          HUMIDITY_BARS=$(echo "scale=0; $HUMIDITY / 10" | bc -l 2>/dev/null || echo "5")
        else
          HUMIDITY_BARS=5
        fi
        
        # Wind bar (0-50 km/h scale)
        if [ "$WIND_SPEED" != "N/A" ] && [ "$WIND_SPEED" != "null" ]; then
          WIND_BARS=$(echo "scale=0; ($WIND_SPEED * 10) / 50" | bc -l 2>/dev/null || echo "2")
        else
          WIND_BARS=2
        fi
        
        # Ensure bars are within range
        TEMP_BARS=$(( TEMP_BARS > 10 ? 10 : TEMP_BARS ))
        TEMP_BARS=$(( TEMP_BARS < 0 ? 0 : TEMP_BARS ))
        HUMIDITY_BARS=$(( HUMIDITY_BARS > 10 ? 10 : HUMIDITY_BARS ))
        HUMIDITY_BARS=$(( HUMIDITY_BARS < 0 ? 0 : HUMIDITY_BARS ))
        WIND_BARS=$(( WIND_BARS > 10 ? 10 : WIND_BARS ))
        WIND_BARS=$(( WIND_BARS < 0 ? 0 : WIND_BARS ))
        
        # Generate bar charts
        TEMP_BAR=$(printf "‚ñà%.0s" $(seq 1 $TEMP_BARS))$(printf "‚ñë%.0s" $(seq $(($TEMP_BARS + 1)) 10))
        HUMIDITY_BAR=$(printf "‚ñà%.0s" $(seq 1 $HUMIDITY_BARS))$(printf "‚ñë%.0s" $(seq $(($HUMIDITY_BARS + 1)) 10))
        WIND_BAR=$(printf "‚ñà%.0s" $(seq 1 $WIND_BARS))$(printf "‚ñë%.0s" $(seq $(($WIND_BARS + 1)) 10))
        
        echo "temp_bar=$TEMP_BAR" >> $GITHUB_OUTPUT
        echo "humidity_bar=$HUMIDITY_BAR" >> $GITHUB_OUTPUT
        echo "wind_bar=$WIND_BAR" >> $GITHUB_OUTPUT

    - name: üìä Create Weather Data Files
      run: |
        # Create current weather JSON for terminal
        cat > "assets/current-weather.json" << EOF
        {
          "station": "${{ steps.location.outputs.station_name }}",
          "coordinates": "${{ steps.location.outputs.coordinates }}",
          "temperature": "${{ steps.weather.outputs.temp }}",
          "apparent_temperature": "${{ steps.weather.outputs.apparent_temp }}",
          "humidity": "${{ steps.weather.outputs.humidity }}",
          "wind_direction": "${{ steps.weather.outputs.wind_dir }}",
          "wind_speed_kmh": "${{ steps.weather.outputs.wind_speed }}",
          "wind_gust_kmh": "${{ steps.weather.outputs.wind_gust }}",
          "pressure_hpa": "${{ steps.weather.outputs.pressure }}",
          "rainfall_mm": "${{ steps.weather.outputs.rainfall }}",
          "conditions": "${{ steps.weather.outputs.weather_desc }}",
          "weather_emoji": "${{ steps.weather.outputs.weather_emoji }}",
          "comfort_level": "${{ steps.weather.outputs.comfort }}",
          "observation_time": "${{ steps.weather.outputs.observation_time }}",
          "updated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "visualizations": {
            "temperature_bar": "${{ steps.visualization.outputs.temp_bar }}",
            "humidity_bar": "${{ steps.visualization.outputs.humidity_bar }}",
            "wind_bar": "${{ steps.visualization.outputs.wind_bar }}"
          }
        }
        EOF

    - name: üìù Create Weather Markdown Page
      run: |
        mkdir -p weather/daily
        DATE=$(date +%Y%m%d)
        
        cat > "weather/daily/$DATE.md" << EOF
        # üå§Ô∏è Tasmania Weather - $(date +"%Y-%m-%d")
        
        **Station:** ${{ steps.location.outputs.station_name }}  
        **Coordinates:** ${{ steps.location.outputs.coordinates }}  
        **Last Updated:** ${{ steps.weather.outputs.observation_time }}
        
        ## üå°Ô∏è Current Conditions
        
        **Weather:** ${{ steps.weather.outputs.weather_desc }} ${{ steps.weather.outputs.weather_emoji }}  
        **Temperature:** ${{ steps.weather.outputs.temp }}¬∞C (feels like ${{ steps.weather.outputs.apparent_temp }}¬∞C)  
        **Comfort Level:** ${{ steps.weather.outputs.comfort }}
        
        ## üìä Detailed Measurements
        
        | Metric | Value | Visualization |
        |--------|-------|---------------|
        | üå°Ô∏è Temperature | ${{ steps.weather.outputs.temp }}¬∞C | [${{ steps.visualization.outputs.temp_bar }}] |
        | üíß Humidity | ${{ steps.weather.outputs.humidity }}% | [${{ steps.visualization.outputs.humidity_bar }}] |
        | üí® Wind Speed | ${{ steps.weather.outputs.wind_speed }} km/h | [${{ steps.visualization.outputs.wind_bar }}] |
        | üß≠ Wind Direction | ${{ steps.weather.outputs.wind_dir }} | |
        | üå™Ô∏è Wind Gusts | ${{ steps.weather.outputs.wind_gust }} km/h | |
        | üîΩ Pressure | ${{ steps.weather.outputs.pressure }} hPa | |
        | üåßÔ∏è Rainfall | ${{ steps.weather.outputs.rainfall }} mm | |
        
        ## üå± Environmental Impact
        
        **Solar Conditions:** $([ "${{ steps.weather.outputs.weather_desc }}" = *"Clear"* ] && echo "Optimal ‚òÄÔ∏è" || echo "Reduced ‚òÅÔ∏è")  
        **Precipitation:** $([ "${{ steps.weather.outputs.rainfall }}" = "0" ] && echo "Dry conditions üåµ" || echo "Natural irrigation üåßÔ∏è")  
        **Energy Usage:** $([ "${{ steps.weather.outputs.temp }}" -lt "10" ] && echo "Heating required üî•" || echo "Comfortable üòå")
        
        ---
        *Data sourced from Australian Bureau of Meteorology*  
        *Updated automatically via GitHub Actions*
        EOF

    - name: üéØ Update Weather Summary
      run: |
        # Create a summary file for quick access
        cat > "weather/latest.md" << EOF
        # üå§Ô∏è Current Weather - ${{ steps.location.outputs.station_name }}
        
        ${{ steps.weather.outputs.weather_emoji }} **${{ steps.weather.outputs.weather_desc }}**  
        üå°Ô∏è ${{ steps.weather.outputs.temp }}¬∞C (feels like ${{ steps.weather.outputs.apparent_temp }}¬∞C)  
        üíß ${{ steps.weather.outputs.humidity }}% humidity  
        üí® ${{ steps.weather.outputs.wind_dir }} ${{ steps.weather.outputs.wind_speed }} km/h  
        
        **Comfort:** ${{ steps.weather.outputs.comfort }}  
        **Updated:** ${{ steps.weather.outputs.observation_time }}
        EOF

    - name: üöÄ Commit Weather Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Weather Bot"
        
        git add weather/ assets/current-weather.json
        
        git commit -m "üå§Ô∏è Weather Update $(date +%Y%m%d-%H%M)

        üìç ${{ steps.location.outputs.station_name }}
        ${{ steps.weather.outputs.weather_emoji }} ${{ steps.weather.outputs.weather_desc }}
        üå°Ô∏è ${{ steps.weather.outputs.temp }}¬∞C (feels like ${{ steps.weather.outputs.apparent_temp }}¬∞C)
        üíß ${{ steps.weather.outputs.humidity }}% humidity
        üí® ${{ steps.weather.outputs.wind_dir }} ${{ steps.weather.outputs.wind_speed }} km/h
        
        Updated: ${{ steps.weather.outputs.observation_time }}"

    - name: üì§ Push Weather Data
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: üìä Output Weather Summary
      run: |
        echo "üå§Ô∏è Weather Update Complete!"
        echo "üìç Location: ${{ steps.location.outputs.station_name }}"
        echo "${{ steps.weather.outputs.weather_emoji }} Conditions: ${{ steps.weather.outputs.weather_desc }}"
        echo "üå°Ô∏è Temperature: ${{ steps.weather.outputs.temp }}¬∞C"
        echo "üíß Humidity: ${{ steps.weather.outputs.humidity }}%"
        echo "üí® Wind: ${{ steps.weather.outputs.wind_dir }} ${{ steps.weather.outputs.wind_speed }} km/h"
        echo "‚è∞ Updated: ${{ steps.weather.outputs.observation_time }}"