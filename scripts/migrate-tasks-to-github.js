#!/usr/bin/env node

/**
 * Migration script to convert tasks.yml tasks to GitHub Issues
 * Generates GitHub CLI commands for bulk issue creation
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Read and parse tasks.yml
function parseTasksYAML() {
    const tasksPath = path.join(__dirname, 'tasks.yml');
    const yamlContent = fs.readFileSync(tasksPath, 'utf8');
    
    // Extract tasks and enhancements sections
    const tasks = [];
    const lines = yamlContent.split('\n');
    let currentSection = null;
    let currentTask = null;
    let inDescription = false;
    let inCriteria = false;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const trimmed = line.trim();
        
        if (trimmed === 'tasks:' || trimmed === 'enhancements:') {
            currentSection = trimmed.replace(':', '');
            continue;
        }
        
        if (currentSection && trimmed.startsWith('- id:')) {
            // Start new task
            if (currentTask) {
                tasks.push(currentTask);
            }
            currentTask = {
                section: currentSection,
                id: trimmed.split('"')[1],
                description: '',
                acceptance_criteria: []
            };
            inDescription = false;
            inCriteria = false;
        }
        
        if (currentTask) {
            if (trimmed.startsWith('title:')) {
                currentTask.title = trimmed.split('"')[1];
            } else if (trimmed.startsWith('type:')) {
                currentTask.type = trimmed.split('"')[1];
            } else if (trimmed.startsWith('priority:')) {
                currentTask.priority = trimmed.split('"')[1];
            } else if (trimmed.startsWith('assignee:')) {
                currentTask.assignee = trimmed.split('"')[1];
            } else if (trimmed === 'description: |') {
                inDescription = true;
                inCriteria = false;
            } else if (trimmed === 'acceptance_criteria:') {
                inDescription = false;
                inCriteria = true;
            } else if (inDescription && line.startsWith('      ')) {
                currentTask.description += line.substring(6) + '\n';
            } else if (inCriteria && trimmed.startsWith('- ')) {
                currentTask.acceptance_criteria.push(trimmed.substring(2));
            }
        }
    }
    
    // Add the last task
    if (currentTask) {
        tasks.push(currentTask);
    }
    
    return tasks;
}

// Generate GitHub CLI command for a task
function generateGitHubCommand(task) {
    const labels = [
        `"type: ${task.type}"`,
        `"priority: ${task.priority}"`,
        '"agent: claude"'
    ].join(',');
    
    const body = `## Task Description
${task.description.trim()}

## Acceptance Criteria
${task.acceptance_criteria.map(criteria => `- ${criteria}`).join('\n')}

## Task Details
- **ID**: ${task.id}
- **Section**: ${task.section}
- **Priority**: ${task.priority}
- **Type**: ${task.type}

Generated by Claude Code task migration from tasks.yml`;

    const escapedBody = body.replace(/"/g, '\\"').replace(/\n/g, '\\n');
    
    return `gh issue create --repo "adrianwedd/adrianwedd" --title "${task.title}" --body "${escapedBody}" --label ${labels} --assignee "${task.assignee}"`;
}

// Main migration function
function migrateTasks() {
    console.log('üöÄ Migrating tasks.yml to GitHub Issues\n');
    
    try {
        const tasks = parseTasksYAML();
        console.log(`üìã Found ${tasks.length} tasks to migrate\n`);
        
        // Group tasks by section
        const testTasks = tasks.filter(t => t.section === 'tasks');
        const enhancementTasks = tasks.filter(t => t.section === 'enhancements');
        
        console.log(`üìù Test Coverage Tasks: ${testTasks.length}`);
        console.log(`üéØ Enhancement Tasks: ${enhancementTasks.length}\n`);
        
        // Generate migration script
        let script = '#!/bin/bash\n\n';
        script += '# GitHub Issues Migration Script\n';
        script += '# Generated from tasks.yml\n';
        script += `# Total tasks: ${tasks.length}\n\n`;
        
        script += 'echo "üöÄ Starting GitHub Issues migration..."\n';
        script += 'echo ""\n\n';
        
        // Add test coverage tasks
        script += '# Test Coverage Tasks (15 tasks)\n';
        script += 'echo "üìù Creating Test Coverage Tasks..."\n';
        testTasks.forEach((task, index) => {
            script += `echo "Creating task ${index + 1}/${testTasks.length}: ${task.title}"\n`;
            script += generateGitHubCommand(task) + '\n';
            script += 'sleep 2  # Rate limiting\n\n';
        });
        
        script += 'echo "‚úÖ Test coverage tasks created"\n';
        script += 'echo ""\n\n';
        
        // Add enhancement tasks
        script += '# Enhancement Tasks (20 tasks)\n';
        script += 'echo "üéØ Creating Enhancement Tasks..."\n';
        enhancementTasks.forEach((task, index) => {
            script += `echo "Creating enhancement ${index + 1}/${enhancementTasks.length}: ${task.title}"\n`;
            script += generateGitHubCommand(task) + '\n';
            script += 'sleep 2  # Rate limiting\n\n';
        });
        
        script += 'echo "‚úÖ Enhancement tasks created"\n';
        script += 'echo ""\n';
        script += 'echo "üéâ Migration complete! Check GitHub Issues at:"\n';
        script += 'echo "https://github.com/adrianwedd/adrianwedd/issues"\n';
        
        // Write migration script
        fs.writeFileSync('migrate-to-github.sh', script);
        fs.chmodSync('migrate-to-github.sh', '755');
        
        console.log('üìÑ Generated migration script: migrate-to-github.sh');
        console.log('');
        console.log('üîß To run the migration:');
        console.log('   1. Ensure GitHub CLI is installed and authenticated');
        console.log('   2. Run: ./migrate-to-github.sh');
        console.log('');
        console.log('‚ö†Ô∏è  Note: This will create 35 GitHub Issues. Consider running in batches if needed.');
        console.log('');
        
        // Generate summary
        console.log('üìä Migration Summary:');
        console.log('');
        console.log('Test Coverage Tasks:');
        testTasks.slice(0, 5).forEach(task => {
            console.log(`   ‚Ä¢ ${task.id}: ${task.title}`);
        });
        if (testTasks.length > 5) {
            console.log(`   ... and ${testTasks.length - 5} more test tasks`);
        }
        
        console.log('');
        console.log('Enhancement Tasks:');
        enhancementTasks.slice(0, 5).forEach(task => {
            console.log(`   ‚Ä¢ ${task.id}: ${task.title}`);
        });
        if (enhancementTasks.length > 5) {
            console.log(`   ... and ${enhancementTasks.length - 5} more enhancement tasks`);
        }
        
        console.log('');
        console.log('‚úÖ Migration preparation complete!');
        
    } catch (error) {
        console.error('‚ùå Migration failed:', error.message);
        process.exit(1);
    }
}

// Run migration
migrateTasks();